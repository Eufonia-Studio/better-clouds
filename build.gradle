plugins {
	id "architectury-plugin" version "3.4-SNAPSHOT"
	id "dev.architectury.loom" version "1.2-SNAPSHOT" apply false
	id "com.modrinth.minotaur" version "2.+"
}

architectury {
	minecraft = rootProject.minecraft_version
}

subprojects {
	apply plugin: "dev.architectury.loom"

	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	}
}

allprojects {
	apply plugin: "java"
	apply plugin: "architectury-plugin"
	apply plugin: "maven-publish"

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	archivesBaseName = project.archives_base_name
	version = project.mod_version
	if(project.version_type != "RELEASE") {
		version += "-" + project.version_type
	}
	version += "+" + project.minecraft_version
	if(project.version_type != "RELEASE") {
		version += "." + 'git rev-parse --short HEAD'.execute().text.trim()
	}
	group = project.maven_group

	repositories {
		maven {
			name = "TerraformersMC"
			url = "https://maven.terraformersmc.com/releases/"
		}
		maven {
			name = "Modrinth"
			url = "https://api.modrinth.com/maven"
			content {
				includeGroup "maven.modrinth"
			}
		}
		maven { url "https://maven.shedaniel.me/" }
		maven {
			name 'Xander Maven'
			url 'https://maven.isxander.dev/releases'
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
		options.release = 17
	}

	java {
		// If you remove this line, sources will not be generated.
		withSourcesJar()
	}

	jar {
		from("LICENSE") {
			rename { "${it}_${project.archivesBaseName}"}
		}
	}
}


//modrinth  { // Make sure it runs after build!
//	def secrets = new Properties()
//
//	file("./secrets.properties").withInputStream {
//		stream -> secrets.load(stream)
//	}
//
//	// An environment property called MODRINTH that is your token, set via Gradle CLI, GitHub Actions, Idea Run Configuration, or other
//	token = secrets.MODRINTH
//	projectId = '5srFLIaK'
//	versionNumber = "${project.mod_version}+${project.minecraft_version}-${project.version_type.substring(0, 1)}" // Will fail if Modrinth has this version already
//	versionName = "${project.mod_version} for ${project.minecraft_version} ${project.version_type}"
//	versionType = Enum.valueOf(com.modrinth.minotaur.request.VersionType.class, "${project.version_type}").name()
//	// On fabric, use 'remapJar' instead of 'jar'
//	uploadFile = remapJar  // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
//	gameVersions = ['1.20', '1.20.1']
//	loaders = ['fabric']
//	dependencies { // A special DSL for creating dependencies
//		// scope.type
//		// The scope can be `required`, `optional`, `incompatible`, or `embedded`
//		// The type can either be `project` or `version`
//		required.project "fabric-api"
//		required.version "zJ1Wh6pM" // yacl 3.0.2
//		optional.project "sodium"
//		optional.project "iris"
//		optional.project "modmenu"
//	}
//}
